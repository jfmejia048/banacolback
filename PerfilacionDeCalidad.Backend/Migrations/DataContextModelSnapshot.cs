// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PerfilacionDeCalidad.Backend.Data;

namespace PerfilacionDeCalidad.Backend.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PerfilacionDeCalidad.Backend.Data.Entities.Buques", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuqueName")
                        .HasMaxLength(50);

                    b.Property<int>("Codigo");

                    b.Property<bool>("Estado");

                    b.HasKey("ID");

                    b.ToTable("Buques");
                });

            modelBuilder.Entity("PerfilacionDeCalidad.Backend.Data.Entities.Cajas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad");

                    b.Property<int>("Codigo");

                    b.Property<bool>("Estado");

                    b.Property<int?>("FrutasID");

                    b.Property<int?>("PomasID");

                    b.HasKey("ID");

                    b.HasIndex("FrutasID");

                    b.HasIndex("PomasID");

                    b.ToTable("Cajas");
                });

            modelBuilder.Entity("PerfilacionDeCalidad.Backend.Data.Entities.Destinos", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Codigo");

                    b.Property<string>("DestinoName")
                        .HasMaxLength(50);

                    b.Property<bool>("Estado");

                    b.HasKey("ID");

                    b.ToTable("Destinos");
                });

            modelBuilder.Entity("PerfilacionDeCalidad.Backend.Data.Entities.Exportadores", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Codigo");

                    b.Property<bool>("Estado");

                    b.Property<string>("ExportadorName")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Exportadores");
                });

            modelBuilder.Entity("PerfilacionDeCalidad.Backend.Data.Entities.Fincas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Codigo");

                    b.Property<bool>("Estado");

                    b.Property<string>("FincaName")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.ToTable("Fincas");
                });

            modelBuilder.Entity("PerfilacionDeCalidad.Backend.Data.Entities.Frutas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Codigo");

                    b.Property<bool>("Estado");

                    b.Property<string>("FrutaName")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Frutas");
                });

            modelBuilder.Entity("PerfilacionDeCalidad.Backend.Data.Entities.Palets", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BuqueID");

                    b.Property<int?>("CajaID");

                    b.Property<int>("CaraPalet");

                    b.Property<string>("Carga")
                        .HasMaxLength(100);

                    b.Property<int>("Codigo");

                    b.Property<string>("CodigoPalet")
                        .HasMaxLength(20);

                    b.Property<int?>("DestinoID");

                    b.Property<DateTime>("Estimado");

                    b.Property<int?>("ExportadorID");

                    b.Property<int?>("FincaID");

                    b.Property<DateTime>("InspeccionPalet");

                    b.Property<DateTime>("LecturaPalet");

                    b.Property<DateTime>("LlegadaCamion");

                    b.Property<DateTime>("LlegadaTerminal");

                    b.Property<int>("NumeroCajas");

                    b.Property<bool>("Perfilar");

                    b.Property<int?>("PuertoID");

                    b.Property<DateTime>("SalidaFinca");

                    b.Property<string>("UsuarioLectura")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("BuqueID");

                    b.HasIndex("CajaID");

                    b.HasIndex("DestinoID");

                    b.HasIndex("ExportadorID");

                    b.HasIndex("FincaID");

                    b.HasIndex("PuertoID");

                    b.ToTable("Palets");
                });

            modelBuilder.Entity("PerfilacionDeCalidad.Backend.Data.Entities.Pomas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Codigo");

                    b.Property<bool>("Estado");

                    b.Property<int>("Numero");

                    b.Property<string>("Placa")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.ToTable("Pomas");
                });

            modelBuilder.Entity("PerfilacionDeCalidad.Backend.Data.Entities.Puertos", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Codigo");

                    b.Property<bool>("Estado");

                    b.Property<string>("PuertoName")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Puertos");
                });

            modelBuilder.Entity("PerfilacionDeCalidad.Backend.Data.Entities.Tracking", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Codigo");

                    b.Property<string>("Evento")
                        .HasMaxLength(100);

                    b.Property<DateTime>("LecturaPalet");

                    b.Property<string>("Localizacion")
                        .HasMaxLength(100);

                    b.Property<int?>("PaletID");

                    b.Property<string>("Punto")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("PaletID");

                    b.ToTable("Tracking");
                });

            modelBuilder.Entity("PerfilacionDeCalidad.Backend.Data.Entities.TypeDocument", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abreviatura");

                    b.Property<string>("Nombre");

                    b.HasKey("ID");

                    b.ToTable("TypeDocuments");
                });

            modelBuilder.Entity("PerfilacionDeCalidad.Backend.Data.Entities.TypeUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.ToTable("TypeUsers");
                });

            modelBuilder.Entity("PerfilacionDeCalidad.Backend.Data.Entities.TypeVias", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TypeVia");

                    b.HasKey("ID");

                    b.ToTable("TypeVias");
                });

            modelBuilder.Entity("PerfilacionDeCalidad.Backend.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("State");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int?>("TypeDocumentID");

                    b.Property<int?>("TypeUserID");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Document")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TypeDocumentID");

                    b.HasIndex("TypeUserID");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PerfilacionDeCalidad.Backend.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PerfilacionDeCalidad.Backend.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PerfilacionDeCalidad.Backend.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PerfilacionDeCalidad.Backend.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PerfilacionDeCalidad.Backend.Data.Entities.Cajas", b =>
                {
                    b.HasOne("PerfilacionDeCalidad.Backend.Data.Entities.Frutas", "Frutas")
                        .WithMany()
                        .HasForeignKey("FrutasID");

                    b.HasOne("PerfilacionDeCalidad.Backend.Data.Entities.Pomas", "Pomas")
                        .WithMany()
                        .HasForeignKey("PomasID");
                });

            modelBuilder.Entity("PerfilacionDeCalidad.Backend.Data.Entities.Palets", b =>
                {
                    b.HasOne("PerfilacionDeCalidad.Backend.Data.Entities.Buques", "Buque")
                        .WithMany()
                        .HasForeignKey("BuqueID");

                    b.HasOne("PerfilacionDeCalidad.Backend.Data.Entities.Cajas", "Caja")
                        .WithMany()
                        .HasForeignKey("CajaID");

                    b.HasOne("PerfilacionDeCalidad.Backend.Data.Entities.Destinos", "Destino")
                        .WithMany()
                        .HasForeignKey("DestinoID");

                    b.HasOne("PerfilacionDeCalidad.Backend.Data.Entities.Exportadores", "Exportador")
                        .WithMany()
                        .HasForeignKey("ExportadorID");

                    b.HasOne("PerfilacionDeCalidad.Backend.Data.Entities.Fincas", "Finca")
                        .WithMany()
                        .HasForeignKey("FincaID");

                    b.HasOne("PerfilacionDeCalidad.Backend.Data.Entities.Puertos", "Puerto")
                        .WithMany()
                        .HasForeignKey("PuertoID");
                });

            modelBuilder.Entity("PerfilacionDeCalidad.Backend.Data.Entities.Tracking", b =>
                {
                    b.HasOne("PerfilacionDeCalidad.Backend.Data.Entities.Palets", "Palet")
                        .WithMany()
                        .HasForeignKey("PaletID");
                });

            modelBuilder.Entity("PerfilacionDeCalidad.Backend.Data.Entities.User", b =>
                {
                    b.HasOne("PerfilacionDeCalidad.Backend.Data.Entities.TypeDocument", "TypeDocument")
                        .WithMany()
                        .HasForeignKey("TypeDocumentID");

                    b.HasOne("PerfilacionDeCalidad.Backend.Data.Entities.TypeUser", "TypeUser")
                        .WithMany()
                        .HasForeignKey("TypeUserID");
                });
#pragma warning restore 612, 618
        }
    }
}
